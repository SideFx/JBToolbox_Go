//----------------------------------------------------------------------------------------------------------
// Blowfish self test, (w) 2025 by Jan Buchholz
//----------------------------------------------------------------------------------------------------------

package JBSelftest

import (
	"JBToolbox/JBCommon"
	"JBToolbox/JBCrypto"
)

func BlowfishSelfTest() bool {
	var plainH = [...]uint32{
		0x00000000, 0xffffffff, 0x10000000, 0x11111111, 0x11111111, 0x01234567, 0x00000000, 0x01234567,
		0x01a1d6d0, 0x5cd54ca8, 0x0248d438, 0x51454b58, 0x42fd4430, 0x059b5e08, 0x0756d8e0, 0x762514b8,
		0x3bdd1190, 0x26955f68, 0x164d5e40, 0x6b056e18, 0x004bd6ef, 0x480d3900, 0x437540c8, 0x072d43a0,
		0x02fe5577, 0x1d9d5c50, 0x30553228, 0x01234567, 0x01234567, 0x01234567, 0xffffffff, 0x00000000,
		0x00000000, 0xffffffff, 0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98,
		0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98,
		0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98, 0xfedcba98,
		0xfedcba98, 0xfedcba98,
	}
	var plainL = [...]uint32{
		0x00000000, 0xffffffff, 0x00000001, 0x11111111, 0x11111111, 0x89abcdef, 0x00000000, 0x89abcdef,
		0x39776742, 0x3def57da, 0x06f67172, 0x2ddf440a, 0x59577fa2, 0x51cf143a, 0x774761d2, 0x29bf486a,
		0x49372802, 0x35af609a, 0x4f275232, 0x759f5cca, 0x09176062, 0x6ee762f2, 0x698f3cfa, 0x77075292,
		0x8117f12a, 0x18f728c2, 0x6d6f295a, 0x89abcdef, 0x89abcdef, 0x89abcdef, 0xffffffff, 0x00000000,
		0x00000000, 0xffffffff, 0x76543210, 0x76543210, 0x76543210, 0x76543210, 0x76543210, 0x76543210,
		0x76543210, 0x76543210, 0x76543210, 0x76543210, 0x76543210, 0x76543210, 0x76543210, 0x76543210,
		0x76543210, 0x76543210, 0x76543210, 0x76543210, 0x76543210, 0x76543210, 0x76543210, 0x76543210,
		0x76543210, 0x76543210,
	}
	var keyV = [...]byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
		0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
		0x7c, 0xa1, 0x10, 0x45, 0x4a, 0x1a, 0x6e, 0x57, 0x01, 0x31, 0xd9, 0x61, 0x9d, 0xc1, 0x37, 0x6e,
		0x07, 0xa1, 0x13, 0x3e, 0x4a, 0x0b, 0x26, 0x86, 0x38, 0x49, 0x67, 0x4c, 0x26, 0x02, 0x31, 0x9e,
		0x04, 0xb9, 0x15, 0xba, 0x43, 0xfe, 0xb5, 0xb6, 0x01, 0x13, 0xb9, 0x70, 0xfd, 0x34, 0xf2, 0xce,
		0x01, 0x70, 0xf1, 0x75, 0x46, 0x8f, 0xb5, 0xe6, 0x43, 0x29, 0x7f, 0xad, 0x38, 0xe3, 0x73, 0xfe,
		0x07, 0xa7, 0x13, 0x70, 0x45, 0xda, 0x2a, 0x16, 0x04, 0x68, 0x91, 0x04, 0xc2, 0xfd, 0x3b, 0x2f,
		0x37, 0xd0, 0x6b, 0xb5, 0x16, 0xcb, 0x75, 0x46, 0x1f, 0x08, 0x26, 0x0d, 0x1a, 0xc2, 0x46, 0x5e,
		0x58, 0x40, 0x23, 0x64, 0x1a, 0xba, 0x61, 0x76, 0x02, 0x58, 0x16, 0x16, 0x46, 0x29, 0xb0, 0x07,
		0x49, 0x79, 0x3e, 0xbc, 0x79, 0xb3, 0x25, 0x8f, 0x4f, 0xb0, 0x5e, 0x15, 0x15, 0xab, 0x73, 0xa7,
		0x49, 0xe9, 0x5d, 0x6d, 0x4c, 0xa2, 0x29, 0xbf, 0x01, 0x83, 0x10, 0xdc, 0x40, 0x9b, 0x26, 0xd6,
		0x1c, 0x58, 0x7f, 0x1c, 0x13, 0x92, 0x4f, 0xef, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x1f, 0x1f, 0x1f, 0x1f, 0x0e, 0x0e, 0x0e, 0x0e, 0xe0, 0xfe, 0xe0, 0xfe, 0xf1, 0xfe, 0xf1, 0xfe,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	}
	var keyS = [...]byte{
		0xf0, 0xe1, 0xd2, 0xc3, 0xb4, 0xa5, 0x96, 0x87, 0x78, 0x69, 0x5a, 0x4b, 0x3c, 0x2d, 0x1e, 0x0f,
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
	}
	var ciphH = [...]uint32{
		0x4ef99745, 0x51866fd5, 0x7d856f9a, 0x2466dd87, 0x61f9c380, 0x7d0cc630, 0x4ef99745, 0x0aceab0f,
		0x59c68245, 0xb1b8cc0b, 0x1730e577, 0xa25e7856, 0x353882b1, 0x48f4d088, 0x432193b7, 0x13f04154,
		0x2eedda93, 0xd887e039, 0x5f99d04f, 0x4a057a3b, 0x452031c1, 0x7555ae39, 0x53c55f9c, 0x7a8e7bfa,
		0xcf9c5d7a, 0xd1abb290, 0x55cb3774, 0xfa34ec48, 0xa7907951, 0xc39e072d, 0x014933e0, 0xf21e9a77,
		0x24594688, 0x6b5c5a9c, 0xf9ad597c, 0xe91d21c1, 0xe9c2b70a, 0xbe1e6394, 0xb39e4448, 0x9457aa83,
		0x8bb77032, 0xe87a244e, 0x15750e7a, 0x122ba70b, 0x3a833c9a, 0x9409da87, 0x884f8062, 0x1f85031c,
		0x79d9373a, 0x93142887, 0x03429e83, 0xa4299e27, 0xafd5aed1, 0x10851c0e, 0xe6f51ed7, 0x64a6e14a,
		0x80c7d7d4, 0x05044b62,
	}
	var ciphL = [...]uint32{
		0x6198dd78, 0xb85ecb8a, 0x613063f2, 0x8b963c9d, 0x2281b096, 0xafda1ec7, 0x6198dd78, 0xc6a0a28d,
		0xeb05282b, 0x250f09a0, 0x8bea1da4, 0xcf2651eb, 0x09ce8f1a, 0x4c379918, 0x8951fc98, 0xd69d1ae5,
		0xffd39c79, 0x3c2da6e3, 0x5b163969, 0x24d3977b, 0xe4fada8e, 0xf59b87bd, 0xb49fc019, 0x937e89a3,
		0x4986adb5, 0x658bc778, 0xd13ef201, 0x47b268b2, 0x08ea3cae, 0x9fac631d, 0xcdaff6e4, 0xb71c49bc,
		0x5754369a, 0x5d9e0a5a, 0x49db005e, 0xd961a6d6, 0x1bc65cf3, 0x08640f05, 0x1bdb1e6e, 0xb1928c0d,
		0xf960629d, 0x2cc85e82, 0x4f4ec577, 0x3ab64ae0, 0xffc537f6, 0xa90f6bf2, 0x5060b8b4, 0x19e11968,
		0x714ca34f, 0xee3be15c, 0x8ce2d14b, 0x469ff67b, 0xc1bc96a8, 0x3858da9f, 0x9b9db21f, 0xfd36b46f,
		0x5a5479ad, 0xfa52d080,
	}
	const loopCk = 34
	const loopVk = 24
	var key []byte
	var zl, zr uint32
	var i, j, k int
	var blowfish JBCrypto.Blowfish
	k = 0
	/* constant key size = 8 */
	key = make([]byte, 8)
	for i = 0; i < loopCk; i++ {
		for j = 0; j < 8; j++ {
			key[j] = keyV[k+j]
		}
		k += 8
		zl = plainH[i]
		zr = plainL[i]
		blowfish = JBCrypto.BlowfishFactory(key)
		blowfish.EncryptBase(&zl, &zr)
		if (zl != ciphH[i]) || (zr != ciphL[i]) {
			return false
		}
		blowfish.DecryptBase(&zl, &zr)
		if (zl != plainH[i]) || (zr != plainL[i]) {
			return false
		}
	}
	/* variable key size */
	for i = 0; i < loopVk; i++ {
		key = make([]byte, i+1)
		for j = 0; j <= i; j++ {
			key[j] = keyS[j]
		}
		zl = plainH[loopCk+i]
		zr = plainL[loopCk+i]
		blowfish = JBCrypto.BlowfishFactory(key)
		blowfish.EncryptBase(&zl, &zr)
		if (zl != ciphH[loopCk+i]) || (zr != ciphL[loopCk+i]) {
			return false
		}
		blowfish.DecryptBase(&zl, &zr)
		if (zl != plainH[loopCk+i]) || (zr != plainL[loopCk+i]) {
			return false
		}
	}
	return true
}

func JBBlowfishSelftest() {
	var res string
	if BlowfishSelfTest() {
		res = "PASSED"
	} else {
		res = "FAILED"
	}
	const key = "Batteries not included"
	ivec := []byte{0x01, 0xaa, 0xff, 0x55, 0x23, 0x91, 0x45, 0xee}
	println("\n---------------- Blowfish Selftest ----------------")
	println("... using standard test vectors: ", res)
	println("\n---------------- Blowfish ECB Test ----------------")
	bfish := JBCrypto.BlowfishFactory([]byte(key))
	println("Encryption key: ", key)
	println("Plain text    : ", JBCommon.Text1)
	enc := bfish.EncryptECB([]byte(JBCommon.Text1))
	println("Encrypted text: ", JBCommon.ByteArrayToHexString(enc))
	dec := bfish.DecryptECB(enc)
	println("Decrypted text: ", string(dec))
	println("\n---------------- Blowfish CBC Test ----------------")
	println("Encryption key  : ", key)
	println("Init. CBC vector: ", JBCommon.ByteArrayToHexString(ivec))
	println("Plain text      : ", JBCommon.Text1)
	enc = bfish.EncryptCBC([]byte(JBCommon.Text1), ivec)
	println("Encrypted text  : ", JBCommon.ByteArrayToHexString(enc))
	dec = bfish.DecryptCBC(enc, ivec)
	println("Decrypted text  : ", string(dec))
}
