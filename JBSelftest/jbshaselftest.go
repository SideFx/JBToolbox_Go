//----------------------------------------------------------------------------------------------------------
// Sha256 & Sha512 self test, (w) 2025 by Jan Buchholz
//----------------------------------------------------------------------------------------------------------

package JBSelftest

import (
	"JBToolbox/JBCommon"
	"JBToolbox/JBCrypto"
)

func JBSha512Selftest() {
	var check0 = []byte{
		0x07, 0xe5, 0x47, 0xd9, 0x58, 0x6f, 0x6a, 0x73, 0xf7, 0x3f, 0xba, 0xc0, 0x43, 0x5e, 0xd7, 0x69,
		0x51, 0x21, 0x8f, 0xb7, 0xd0, 0xc8, 0xd7, 0x88, 0xa3, 0x09, 0xd7, 0x85, 0x43, 0x6b, 0xbb, 0x64,
		0x2e, 0x93, 0xa2, 0x52, 0xa9, 0x54, 0xf2, 0x39, 0x12, 0x54, 0x7d, 0x1e, 0x8a, 0x3b, 0x5e, 0xd6,
		0xe1, 0xbf, 0xd7, 0x09, 0x78, 0x21, 0x23, 0x3f, 0xa0, 0x53, 0x8f, 0x3d, 0xb8, 0x54, 0xfe, 0xe6,
	}
	var check1 = []byte{
		0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd, 0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
		0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc, 0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
		0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0, 0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
		0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81, 0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e,
	}
	data := "The quick brown fox jumps over the lazy dog"
	println("\n---------------- Sha512 Selftest ----------------")
	println("INPUT text     : ", data)
	println("Expected Sha512: ", JBCommon.ByteArrayToHexString(check0))
	res0 := JBCrypto.ComputeSha512([]byte(data))
	println("Computed Sha512: ", JBCommon.ByteArrayToHexString(res0))
	println("INPUT text     : ", "(empty)")
	println("Expected Sha512: ", JBCommon.ByteArrayToHexString(check1))
	res1 := JBCrypto.ComputeSha512([]byte(""))
	println("Computed Sha512: ", JBCommon.ByteArrayToHexString(res1))
}

func JBSha256Selftest() {
	var check0 = []byte{
		0xd3, 0x2b, 0x56, 0x8c, 0xd1, 0xb9, 0x6d, 0x45, 0x9e, 0x72, 0x91, 0xeb, 0xf4, 0xb2, 0x5d, 0x00,
		0x7f, 0x27, 0x5c, 0x9f, 0x13, 0x14, 0x9b, 0xee, 0xb7, 0x82, 0xfa, 0xc0, 0x71, 0x66, 0x13, 0xf8,
	}
	var check1 = []byte{
		0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
		0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
	}
	data := "Franz jagt im komplett verwahrlosten Taxi quer durch Bayern"
	println("\n---------------- Sha256 Selftest ----------------")
	println("INPUT text     : ", data)
	println("Expected Sha256: ", JBCommon.ByteArrayToHexString(check0))
	res0 := JBCrypto.ComputeSha256([]byte(data))
	println("Computed Sha256: ", JBCommon.ByteArrayToHexString(res0))
	println("INPUT text     : ", "(empty)")
	println("Expected Sha256: ", JBCommon.ByteArrayToHexString(check1))
	res1 := JBCrypto.ComputeSha256([]byte(""))
	println("Computed Sha256: ", JBCommon.ByteArrayToHexString(res1))
}
